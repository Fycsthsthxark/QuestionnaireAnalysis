"""
Django settings for Server project.

Generated by 'django-admin startproject' using Django 3.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import os
import platform
from pathlib import Path

"""
==================== Django配置 ====================
"""
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*@r#49uvpzzmtw9m-r)-a63!hj7l5v*j(2%q8h-lg2kmo9)ked'

"""
自动判断DEBUG
"""
# SECURITY WARNING: don't run with debug turned on in production!
currentPlatform = platform.system().capitalize()
DEBUG = not (("Linux" in currentPlatform) or ("linux" in currentPlatform))

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',  # 配置drf-yasg (API文档生成器)
    'questionnaire'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'Server.wsgi.application'
ASGI_APPLICATION = "Server.asgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_ROOT = os.path.join(BASE_DIR, 'static', "media")
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

"""
==================== 自定义配置 ====================
"""
# APP名称
APP_NAME = "Server"

# JSON数据中传输token时的键
JSON_TOKEN_KEY = 'token'

# 定义请求响应JSON基本格式
formatResponseData = {"status": 500, "uid": None, JSON_TOKEN_KEY: None, "msg": "", "data": {}}

# 自定义的用户表
# AUTH_USER_MODEL = '示例APP.模型类名'


"""
CORS跨域
"""
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
# 允许所有的请求头
CORS_ALLOW_HEADERS = ["*"]

# CORS_ORIGIN_WHITELIST = [
#     "http://localhost:8080",
#     "http://127.0.0.1:8080",
# ]
#
# # 允许的跨域请求方法
# CORS_ALLOW_METHODS = [
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
# ]
#
# # 允许请求头中包含的键
# CORS_ALLOW_HEADERS = [
#     "token",
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]


"""
DRF配置
"""
REST_FRAMEWORK = {
    # 自动生成接口文档
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',

    # 版本控制
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'ALLOWED_VERSIONS': ['v1', ],  # 允许的版本
    'VERSION_PARAM': 'version',  # 参数
    'DEFAULT_VERSION': 'v1',  # 默认版本

    # 自定义DRF异常
    'EXCEPTION_HANDLER': 'utils.custom.CustomExceptionHandler',

    # 全局验证类(对所有类视图有效)：验证本身不会认证本身不会允许或拒绝传入的请求，它只是简单识别请求携带的凭证。
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     # 自定义 JWT 认证
    #     'rest_framework_simplejwt.authentication.JWTAuthentication',
    # ),

    # 全局权限类(对所有类视图有效)：连同认证类使用来进行限制，权限才是决定是否应该接收请求或拒绝访问的关键。
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     # 已登录权限
    #     'rest_framework.permissions.IsAuthenticated',
    # ),

    # 渲染器类
    'DEFAULT_RENDERER_CLASSES': (
        # Json渲染器
        'rest_framework.renderers.JSONRenderer',
        # 浏览API渲染器
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
}

"""
JWT 的配置
"""
SIMPLE_JWT = {
    # 自定义用户模型的数据库唯一字段
    'USER_ID_FIELD': 'uid',
    # 生成的token中的声明将用于存储用户的唯一标识符
    'USER_ID_CLAIM': 'uid',
    # 设置token的过期时间
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=365),
    # 使用双token时，设置刷新token的过期时间
    # 'REFRESH_TOKEN_LIFETIME': datetime.timedelta(seconds=20),
    # 寻找请求头中协带Authorization: Bearer <token>的行
    'AUTH_HEADER_TYPES': ('Bearer',),
    # 请求头存放token的键
    "AUTH_HEADER_NAME": "HTTP_TOKEN",
    # token的前缀： 设置为 Bearer，这样在解析 token 时，会自动去掉前缀。
    'JWT_AUTH_HEADER_PREFIX': "Bearer",
}

"""
配置发送邮件
"""
# Host for sending email.
EMAIL_HOST = 'smtp.qq.com'
# Port for sending email.
EMAIL_PORT = 587
EMAIL_HOST_USER = '1274664300@qq.com'
EMAIL_HOST_PASSWORD = 'iiqshaikgorwgbdg'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_SSL_CERTFILE = None
EMAIL_SSL_KEYFILE = None
EMAIL_TIMEOUT = None
DEFAULT_FROM_EMAIL = '1274664300@qq.com'
